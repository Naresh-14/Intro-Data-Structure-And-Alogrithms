Introduction
Dynamic Programming optimizes recursive solutions by storing and reusing results of subproblems, reducing time complexities 
from exponential to polynomial

Fibonacci Series Example
The Fibonacci series is a sequence of numbers where each number is the sum of the two preceding ones, typically starting with 0 and 1.

So, it goes like this: 0, 1, 1, 2, 3, 5, 8, 13, and so on, where each number is the sum of the two numbers before it.

Formula
Fib(n) = Fib(n-1) + Fib(n-2), where n > 1


Fibonacci series
 0    1    1    2    3    5    8   13 .....
 |    |    |    |    |    |    |    |
F(0) F(1) F(2) F(3) F(4) F(5) F(6) F(7) .....


Pseudo Code Using Recursion

f(n){
    if ( n == 0 )
        return 0
    if ( n == 1 )
        return 1
    return f(n-1) + f(n-2)
}



Explanation

Base Cases:

If n is 0, return 0 (base case).

If n is 1, return 1 (base case).

Recursive Step:

For any other value of n, calculate the Fibonacci number by adding the results of two recursive calls:

f(n-1): The (n-1)th Fibonacci number.

f(n-2): The (n-2)th Fibonacci number.

